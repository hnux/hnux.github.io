<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CSS 学习笔记]]></title>
    <url>%2F2018%2F07%2F19%2F027_CSS_Notes%2F</url>
    <content type="text"><![CDATA[1. CSS 基础 CSS 选择器参考手册 CSS 核心概念和知识点 常用命名惯例参考 默认浏览器样式 1.1 @import 一个 .css 要引入其他 .css , 要把 @import url(xxx.css); 语句写在文件的开头; 用得比较少; 1.2 行内样式: 标签上加 style 属性 行内CSS, 也叫行级CSS, 内联CSS; 通常行内CSS作为测试使用, 可以查找代码中bug; 便捷高效, 优先级很高; 可复用性差; css 指定得越确切, 优先级越高; 行内 &gt; 页级 &gt; 外联; 优先级最高的是, 在 .css 里, 选择器的定义语句末尾加入 !important 关键词; 谨慎使用; 1.3 页级样式和外联样式 页级样式(页内, 内部): .html 的 &lt;head&gt; 中添加 &lt;style&gt; , 作用范围仅限于本页元素; 外联样式: .html 的 &lt;head&gt; 中添加 &lt;link&gt; 引入 .css 文件; 最常用, 最灵活; 1.4 元素选择器 , 用于区隔同组的元素选择器 yourElementName ; 太长的话, 可以换行; 1.5 class 选择器 .html 中的 class 属性用空格区隔; class 选择器 .yourClassName 可以组合使用, 中间没有空格, 表示同时选中; 如果有空格, 表示层级关系; 1.6 id 选择器 id 选择器 #yourIdName 最好不要重复; 1.7 属性选择器 属性选择器 [yourAttributeName] ; 与元素选择器配合使用; 传入属性值的方式(完全匹配) [yourAttributeName=&quot;yourValue&quot;] ; 包含属性值的方式(部分匹配) [yourAttributeName*=&quot;yourValue&quot;] ; 匹配开始的字符 [yourAttributeName^=&quot;yourValue&quot;] ; 匹配结束的字符 [yourAttributeName$=&quot;yourValue&quot;] ; 应用: 过滤安全链接, 自定义不同类型的输入框… 1234567891011121314151617181920212223242526272829303132333435/* title 属性, 相当于注释, 鼠标悬停会显示注释; */[title] &#123; background: red; /* color 为文本颜色 */ color: white; &#125;/* 1. 完全匹配 */[title="点击此处登录"] &#123; background: green;&#125;/* 2. 部分匹配 */[title*="点击"] &#123; background: blue;&#125;/* 3. 匹配开头 */[title^="点击"] &#123; background: yellow;&#125;/* 4. 匹配结尾 */[title$="博客"] &#123; background: violet;&#125;/* 5. 用来过滤安全链接 */a[href^="https://hnux.github.io"] &#123; color: blue;&#125;/* 6. 自定义不同类型的输入框 */ input[type="submit"] &#123; border: 0;&#125;input[type="text"] &#123; width: 100%; border: 5px solid black; padding: 10px;&#125; 1.8 后代选择器 * 是元素通配符; 优先级比较低; 用得最频繁的选择方式; 123.a .c &#123; border: 2px solid black;&#125; 1.9 相邻选择器 只会从上往下选, 过去了就过去了; 主要是出于性能方面的考虑; + yourSelector 表示选中下一个; ~ yourSelector 表示选中接下来的所有平级元素; 123456.b + div &#123; background: rgba(0, 255, 0, .2);&#125;.a ~ div &#123; background: rgba(0, 0, 255, .2);&#125; 1.10 伪类选择器 表现得像类, 用起来像类, 但事实上又不是类, 更多的是一种状态; 锚: a:link , a:visited , a:hover , a:active ; 按钮: button:hover , button:active ; 输入框: input:focus ; 1234567891011121314151617181920a:link &#123; color: blue;&#125;a:visited &#123; color: gray;&#125;button:hover,a:hover &#123; background: #888;&#125;button:active,a:active &#123; background: #333; color: #fff;&#125;input:focus &#123; /* 去掉轮廓 */ outline: none; background: #aaa; &#125; 1.11 伪元素选择器 结构上不存在, 逻辑上存在; 建议使用 : , 因为老旧的浏览器对它的兼容性更好, :: 出现得比较晚; 段落: p:first-letter ; 在元素尾部追加内容: .yourClassName:after ; 在元素头部添加内容: .yourClassName:before ; 为 [ 第 1 个 / 第 n 个 / 最后一个] 元素添加样式: .yourClassName:[first-child / nth-child(x) / last-child] ; 1234567891011121314151617181920212223242526/* 1. 段落首字母 */p:first-letter &#123; font-size: 30px;&#125;/* 2. 元素尾部追加 */.help:after &#123; content: "[?]"; color: blue;&#125;/* 2.1 元素头部插入 */.help::before &#123; content: "**"; color: red;&#125;/* 3. 为第 1 个元素添加样式 */div p:first-child &#123; color: blue;&#125;/* 3.1 为最后一个元素添加样式 */div p:last-child &#123; color: red;&#125;/* 3.2 为第 n 个元素添加样式 */div p:nth-child(1) &#123; color: green;&#125; 1.12 选择器权重 指定得越确切, 优先级越高; 谨慎使用内联样式; style 属性 (内联) ID 选择器 [类 / 属性 / 伪类] 选择器 元素选择器 1000 0100 0010 0001 1.13 字体属性1.13.1 font-family font-family description serif 衬线字体, 在笔画拐弯的地方会有装饰, 更古典 sans-serif 非衬线字体, 更加圆滑, 更现代 从第一个字体开始扫描, 如果都没找到, 则用默认字体; 1.13.2 font-weight 值在 100 - 900 之间; normal; bold; 1.13.3 font-size px; %: 母元素字体大小的百分比; inherit: 继承母元素的字体大小; 1.14 文本属性 text-align(对齐方式): left; center; justify; line-height(行高): 数字(字体大小的倍数); px; text-decoration: underline; overline; line-through; none; 1.15 display 属性1.15.1 block(块级元素) 默认为浏览器宽度; 即使设定了 width , 依然用 margin 占着剩余宽度; div 默认为 block ; block 可以想象成固定的盒子; 1.15.2 inline(行内元素) 一般用于文字; inline 可以想象成软的袋子; 添加 padding , margin 只对左右有效, 对上下无效; 1.15.3 inline-block(行内块元素) 可以添加 padding , margin , 而且还可以流动; 一般用于按钮, 导航栏链接; 1.15.4 none 用于隐藏元素; 存在于 DOM 里, 但不显示; 1.16 块级框1.16.0 层次关系 margin(外边距) &gt; border(边框) &gt; padding(内边距) &gt; content(内容区); 1.16.1 content width; height; 1.16.2 padding padding: px; 1.16.3 border border: border-width border-style border-color; 1.16.4 margin margin: px;]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML 学习笔记]]></title>
    <url>%2F2018%2F07%2F19%2F026_HTML_Notes%2F</url>
    <content type="text"><![CDATA[1. HTML 基础 HTML 速查表 1.1 &lt;html&gt; 标签 一张网页有且仅有一个 &lt;html&gt; 标签; 浏览器能解析 &lt;html&gt; 标签之外的内容, 但不建议这么做; 1.2 &lt;body&gt; 标签 存放网页上的可见元素; 1.3 &lt;head&gt; 标签 存放网页上的不可见元素; 1.4 &lt;title&gt; 标签 搜索引擎把 title 作为搜索结果的标题; 浏览器在标签页显示 title ; 1.5 &lt;h1-h6&gt; 标签 可以嵌套子元素; 1.6 &lt;p&gt; 标签 paragraph; 可以嵌套子元素; 嵌套 &lt;p&gt; 标签在网页上不会显示效果, 但层级分明, 便于添加样式; 1.7 &lt;div&gt; 标签 division; 非常干净的盒子, 唯一的功能就是用于容纳其它元素; 1.8 &lt;a&gt; 标签 anchor; 锚链接; 1.8.1 href 属性 hypertext reference; 用于指定超链接目标的 URL; 1.8.2 target 属性 _self : 默认值; 在当前页面打开; _blank : 在新标签页打开; 1.9 &lt;img&gt; 标签 单标签, 结构树的最后一个节点, 不能含有子元素; 所以它不是一个容器; 所以也不需要结束标签; 1.9.1 src 属性 网络路径; 绝对路径; 相对路径; 1.9.2 alt 属性 alternate; 当图片无法显示时, 显示替代的文字; 1.10 &lt;table&gt; 标签1.10.1 &lt;tr&gt; 标签 table row; 1.10.2 &lt;td&gt; 标签 table data cell; 1.10.3 &lt;th&gt; 标签 table head cell; 1.10.4 &lt;thead&gt; 标签 容器; 用来放 &lt;th&gt; 标签; 语法更严谨; 1.10.5 &lt;tbody&gt; 标签 容器; 用来放 &lt;td&gt; 标签; 语法更严谨; 1.10.6 border 属性1.11 &lt;header&gt; 标签 页眉; 重要而抽象的信息, 一般为目录; 指导搜索引擎按优先级抓取网页; 在功能上并没有比 &lt;div&gt; 更多, 只是有语义, 更便于人或爬虫读代码; 1.12 &lt;footer&gt; 标签 页脚; 重要但不常用的信息, 一般为链接; 在功能上并没有比 &lt;div&gt; 更多, 只是有语义, 更便于人或爬虫读代码; 1.13 &lt;hr&gt; 标签 horizonal rule; 水平分割线; 单标签; 1.14 &lt;link&gt; 标签 单标签; 既可以放在 &lt;head&gt; 里, 也可以放在 &lt;body&gt; 里; 一般放在 &lt;head&gt; 里; 一般用于引入 .css 文件; href 属性; ref 属性: 一般为 stylesheet. 1.15 &lt;script&gt; 标签 既可以放在 &lt;head&gt; 里, 也可以放在 &lt;body&gt; 里; 一般放在 &lt;body&gt; 的最后, 可以先显示静态内容; 如果页面对 js 非常依赖, 就把它放在 &lt;head&gt; 里; 用于引入 js; js 可以写在标签里, 也可以写在 .js 文件里; 1.16 &lt;button&gt; 标签 一般放在&lt;form&gt;里; 配合 js; 1.17 &lt;abbr&gt; 标签 abbreviation; 缩写; 行内元素; title 属性: 相当于注释; 鼠标悬停会显示; 换成 &lt;p&gt; 或者其它标签也能鼠标悬停显示原意; 但一般专门用 &lt;abbr&gt; 来表示; 有的浏览器会为&lt;abbr&gt; 添加一些样式, 有时是在下面加虚线, 有时是改变字体; 1.18 &lt;code&gt; 标签 行内元素; 放少量代码; 在 &lt;head&gt; 中用 &lt;style&gt; 添加样式会非常方便, 不用专门去指定一个类; 1.19 &lt;pre&gt; 标签 块级元素; 放大量代码; 在 &lt;head&gt; 中用 &lt;style&gt; 添加样式会非常方便, 不用专门去指定一个类;]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[周六写诗 周日编程]]></title>
    <url>%2F2018%2F07%2F16%2F022_Sat.poem_Sun.code%2F</url>
    <content type="text"><![CDATA[目标180716 Mon. 从本周开始, 运行 2 个微信公众账号, 「周六写诗」和「周日编程」, 英文名 「Sat.poem」&amp; 「Sun.code」. 原因时间向黑洞加速奔驰. 或许是恐惧, 觉得自己应该记录些什么, 以证实自己的心跳和思绪, 是活着的象征; 或许, 是想感受下小时候学的那篇课文 —-「和时间赛跑」. 「写诗」和「编程」, 我好像都不擅长, 只是感兴趣吧. 没关系, 我的心告诉我, 我是喜欢的. 喜欢, 那就做吧. 种一棵树最好的时间是十年前, 其次是现在. 十年前…… 我大概每天都在玩泥巴吧. 那就现在吧, 希望自己能习惯这样的安排, 学习和享受「诗歌」与「代码」. 如果哪天觉得需要靠「坚持」了, 或许, 便不会继续这样的安排了吧. 边走边看吧, 如果能将这股冲动持续到 2019 年, 而且学得有些进步, 或许, 我应该分享给大家看. 代码如诗. 希望十年后, 自己仍然能像现在一样, 喜欢这两件事情, 并为之努力, 可能有一天, 真的能够做到「代码如诗, 诗如代码」. 那是我心向往之的境界. 排版基本采用英文的标点. 主要是因为懒, 编程的时候被中文的标点折腾过几次, 不知哪一天, 电脑的中文输入法自己采用了英文标点, 觉得挺好, 然后就用起来了呗, 也懒得去找输入法的毛病了. 引号和书名号都用「」. 很喜欢这对标点. 或许是因为以前看欧丽娟老师讲课时, 她写板书是竖向排版, 用了这对标点, 我觉得这对标点很好看, 就记住了. 破折号都用 4 个 - 表示. 4 个 - 在我的电脑里, 有时候会变成 2 个长一些的连字符, 加上两边的空格, 好像是占两个中文的位置, 如果迁移到微信公众号和博客上不是这样子, 那就随它们去吧. 编辑器: Typora + 主题: Github 正好用来练习「Markdown 语法」和 「Git 命令」. 专注于产出, 而不是排版, 这或许是编辑器的初衷吧, 希望自己也能这样子. 黑白色 + 层次分明, 觉得是我的调子. 好吧, 主要是因为懒…… 那就开始学习吧.]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>写诗</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[经济学入门大纲]]></title>
    <url>%2F2018%2F07%2F06%2F008_An_Outline_of_Introduction_to_Economics%2F</url>
    <content type="text"><![CDATA[1. 经济学研究的 3 类问题 和 10 个原理 基本观察：资源的稀缺性（scarcity of resources）。 经济学研究社会对稀缺资源的管理，从而研究： 1.1 人们如何做决策（人们的经济行为）How people make decisions 人们面临得失交换（权衡取舍）。People face tradeoffs. 某物的机会成本是为了得到它而放弃的东西。The opportunity cost of an item is what you give up to obtain that item. 理性人思考边际量。Rational people think at the margin. 人们会对激励作出反应。People respond to incentives. 1.2 人们如何相互作用（社会的经济现象）How people interact 贸易能使人人收益。Trade can make everyone better off. 市场通常是组织经济活动的好方式。Markets are usually a good way to organize economic activity. 政府有时可以改进市场结果。Governments can sometimes improve market outcomes. 1.3 整体经济如何运行 How the economy as a whole works 一国的生活水平取决于它的生产。The standard of living depends on a country’s production. 当政府发行了过多的货币时，物价上涨。Prices rise when the government prints too much money. 社会面临通货膨胀和失业之间的短期得失交换。 Society faces a short-run tradeoff between inflation and unemployment. 2. 经济学课程分支 基础 金融学 微观经济学 Micro 公司财务 Corporate Finance 宏观经济学 Macro 资产定价 Asset Pricing 计量经济学 Econometrics 货币银行 Money &amp; Banking 比较经济学 Comparative 国际金融 International Finance 政治经济学 Political Economy 开放宏观经济 Open Economy Macroeconomics 3. 怎么学？跟谁学？ 课程 老师 资源 经济学原理 Introductory 钱颖一 中级经济学 Intermediate 李稻葵 高级经济学 Advanced 白重恩]]></content>
      <categories>
        <category>经济学</category>
      </categories>
      <tags>
        <tag>经济学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「分类」]]></title>
    <url>%2Fcategories%2Findex.html</url>
    <content type="text"><![CDATA[这里是「分类」页面]]></content>
  </entry>
  <entry>
    <title><![CDATA[「关于我」]]></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[这里是「关于我」页面]]></content>
  </entry>
  <entry>
    <title><![CDATA[「标签」]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"><![CDATA[这里是「标签」页面]]></content>
  </entry>
</search>
